---
- name: Validate Admin User and Password
  fail:
    msg: "Mediawiki Admin User and Password cannot be the same value!"
  when: mediawiki_admin_user == mediawiki_admin_pass

- name: create mediawiki endpoint
  k8s_v1_endpoints:
    name: "{{ app_name }}"
    namespace: '{{ namespace }}'
    subsets:
    - addresses:
      - ip: "10.32.0.19"
      ports:
      - name: web
        port: 8080
    labels:
      app: "{{ app_name }}"
      service: "{{ svc_name }}"
    state: present
  register: endpoint
  when: cluster=="kubernetes"

- name: create mediawiki route
  openshift_v1_route:
    name: "{{ app_name }}"
    namespace: '{{ namespace }}'
    spec_port_target_port: web
    labels:
      app: "{{ app_name }}"
      service: "{{ svc_name }}"
    to_name: "{{ app_name }}"
    state: present
  register: route
  when: cluster=="openshift"

- name: create persistent volume claim
  k8s_v1_persistent_volume_claim:
    name: "{{ svc_name }}-pvc"
    namespace: '{{ namespace }}'
    state: present
    access_modes:
      - ReadWriteOnce
    resources_requests:
      storage: '{{ mediawiki_volume_size }}'

- name: create deployment
  k8s_extensions_v1beta1_deployment:
    name: "{{ app_name }}"
    namespace: '{{ namespace }}'
    labels:
      app: "{{ app_name }}"
      service: "{{ svc_name }}"
    replicas: 1
    spec_template_metadata_labels:
      app: "{{ app_name }}"
      service: "{{ svc_name }}"
    strategy_type: Recreate
    containers:
    - env:
      - name: MEDIAWIKI_DB_SCHEMA
        value: "{{ mediawiki_db_schema }}"
      - name: MEDIAWIKI_SITE_NAME
        value: "{{ mediawiki_site_name }}"
      - name: MEDIAWIKI_SITE_LANG
        value: "{{ mediawiki_site_lang }}"
      - name: MEDIAWIKI_ADMIN_USER
        value: "{{ mediawiki_admin_user }}"
      - name: MEDIAWIKI_ADMIN_PASS
        value: "{{ mediawiki_admin_pass }}"
      - name: MEDIAWIKI_SITE_SERVER
        value: '{{ endpoint.endpoints.subsets[0].addresses[0].ip }}'
      image: docker.io/ansibleplaybookbundle/mediawiki:latest
      name: "{{ app_name }}"
      ports:
      - container_port: 8080
        protocol: TCP
      volume_mounts:
        - mount_path: /persistent
          name: "{{ svc_name }}-volume"
    volumes:
      - name: "{{ svc_name }}-volume"
        persistent_volume_claim:
          claim_name: "{{ svc_name }}-pvc"
  when: cluster=="kubernetes"

- name: create deployment config
  openshift_v1_deployment_config:
    name: "{{ app_name }}"
    namespace: '{{ namespace }}'
    labels:
      app: "{{ app_name }}"
      service: "{{ svc_name }}"
    replicas: 1
    selector:
      app: "{{ app_name }}"
      service: "{{ svc_name }}"
    strategy_type: Recreate
    spec_template_metadata_labels:
      app: "{{ app_name }}"
      service: "{{ svc_name }}"
    containers:
    - env:
      - name: MEDIAWIKI_DB_SCHEMA
        value: "{{ mediawiki_db_schema }}"
      - name: MEDIAWIKI_SITE_NAME
        value: "{{ mediawiki_site_name }}"
      - name: MEDIAWIKI_SITE_LANG
        value: "{{ mediawiki_site_lang }}"
      - name: MEDIAWIKI_ADMIN_USER
        value: "{{ mediawiki_admin_user }}"
      - name: MEDIAWIKI_ADMIN_PASS
        value: "{{ mediawiki_admin_pass }}"
      - name: MEDIAWIKI_SITE_SERVER
        value: '{{ route.route.spec.host }}'
      image: docker.io/ansibleplaybookbundle/mediawiki:latest
      name: "{{ app_name }}"
      ports:
      - container_port: 8080
        protocol: TCP
      volume_mounts:
        - mount_path: /persistent
          name: "{{ svc_name }}-volume"
    volumes:
      - name: "{{ svc_name }}-volume"
        persistent_volume_claim:
          claim_name: "{{ svc_name }}-pvc"
  when: cluster=="openshift"

- name: create mediawiki service
  k8s_v1_service:
    name: "{{ app_name }}"
    namespace: '{{ namespace }}'
    labels:
      app: "{{ app_name }}"
      service: "{{ svc_name }}"
    selector:
      app: "{{ app_name }}"
      service: "{{ svc_name }}"
    ports:
      - name: web
        port: 8080
        target_port: 8080
